#+TITLE: settings.org

* Frame
** Transparency

   Function that simply changes the alpha of the current frame to =ALPHA=.

   #+BEGIN_SRC emacs-lisp
(defun set-frame-alpha (alpha)
  (set-frame-parameter (selected-frame) 'alpha (cons alpha alpha)))
   #+END_SRC

*** =set-alpha=

    Command to set the alpha value of the frame.

    #+BEGIN_SRC emacs-lisp
(defun set-alpha (alpha)
  "Change alpha of frame to ALPHA"
  (interactive "nNew alpha (0-100)")
  (set-frame-alpha alpha)
  (setq frame-alpha alpha)
  (setq transparent t))
    #+END_SRC

*** =toggle-transparency=

    Command to toggle transparency of the frame.

    #+BEGIN_SRC emacs-lisp
(defun toggle-transparency ()
  "Toggle transparency between 100 and frame-alpha (set by set-alpha)"
  (interactive)
  (set-frame-alpha (if transparent 100 frame-alpha))
  (setq transparent (not transparent)))
    #+END_SRC


    Bind =F12= to =toggle-transparency=.

    #+BEGIN_SRC emacs-lisp
(global-set-key [f12] #'toggle-transparency)
    #+END_SRC

*** Defaults

    Start emacs with alpha value 85.

    #+BEGIN_SRC emacs-lisp
(set-alpha 85)
    #+END_SRC

** Properties

   Disable the menu bar, tool bar, and scroll bar.

   #+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
   #+END_SRC


   Launch emacs maximized (fullscreen if on Windows).

   #+BEGIN_SRC emacs-lisp
(if (eq window-system 'w32)
    (toggle-frame-fullscreen)
  (add-to-list 'default-frame-alist '(fullscreen . maximized)))
   #+END_SRC

* Buffer
** Line and Column Indicators

   Show relative line numbers.

   #+BEGIN_SRC emacs-lisp
(global-display-line-numbers-mode 1)
(setq display-line-numbers-type 'relative)
   #+END_SRC


   Show ruler at column 80.

   #+BEGIN_SRC emacs-lisp
(global-display-fill-column-indicator-mode 1)
(setq-default fill-column 80)
   #+END_SRC


   Highlight line of cursor.

   #+BEGIN_SRC emacs-lisp
(global-hl-line-mode 1)
   #+END_SRC

** Editing
*** Block Guides

    Show indent and block guides as a character.

    #+BEGIN_SRC emacs-lisp
(use-package highlight-indent-guides
  :hook (prog-mode . highlight-indent-guides-mode)
  :config
  (setq-default highlight-indent-guides-method 'character))
    #+END_SRC

*** Delimiters
**** Rainbow Delimiters

     Show rainbow delimiters in =prog-mode=.

     #+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
     #+END_SRC

**** Matching Brackets

     Highlight matching brackets when the cursor is on one of them.

     #+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
     #+END_SRC


     Enable =electric-pair-mode=, automatically closing parentheses.

     #+BEGIN_SRC emacs-lisp
(electric-pair-mode 1)
     #+END_SRC

*** Autocomplete

    Enable autocomplete using =company=.

    #+BEGIN_SRC emacs-lisp
(use-package company
  :hook (after-init . global-company-mode))
    #+END_SRC

*** Code Cleanup on Save

    Reformat a file before saving by reindenting the buffer and removing
    trailing whitespace. This is rebound instead of it being a hook because if
    it's a hook, /any/ saved file becomes formatted, even ones which are
    generated and probably shouldn't be formatted according to Emacs.

    #+BEGIN_SRC emacs-lisp
(defun cleanup-and-save ()
  "Indents the buffer, removes trailing whitespace, and saves the it."
  (interactive)
  (indent-region (point-min) (point-max) nil)
  (delete-trailing-whitespace)
  (save-buffer))
(add-hook 'c-mode (lambda () (local-set-key (kbd "C-x C-s") #'cleanup-and-save)))
    #+END_SRC

*** =highlight-escape-sequences=

    Highlight escape sequences in string and character literals.

    #+BEGIN_SRC emacs-lisp
(use-package highlight-escape-sequences
  :config
  (hes-mode))
    #+END_SRC

** Properties
*** Font

    Set default font to be
    [[https://fonts.google.com/specimen/Source+Code+Pro][Source Code Pro]] 10 pt.

    #+BEGIN_SRC emacs-lisp
(set-frame-font "Source Code Pro-10" nil t)
    #+END_SRC

* Modes
** General
*** Indentation
**** Using Spaces

     Use spaces for the listed modes.

     #+BEGIN_SRC emacs-lisp
(add-hook 'emacs-lisp-mode-hook (lambda () (setq indent-tabs-mode nil)))
     #+END_SRC

**** Tabs are 4 Spaces

     Make tabs display as 4 spaces wide instead of 8

     #+BEGIN_SRC emacs-lisp
(setq-default tab-width 4)
     #+END_SRC
     
**** Using Smart Tabs

     Enable smart tabs in the listed modes.

     #+BEGIN_SRC emacs-lisp
(use-package smart-tabs-mode
  :config
  (smart-tabs-insinuate 'c 'c++))
     #+END_SRC

** C

   Set indentation style to K&R with the exception of 4 space offset.

   #+BEGIN_SRC emacs-lisp
(setq c-default-style '((java-mode . "java")
                        (awk-mode . "awk")
                        (python-mode . "python")
                        (other . "k&r")))

(setq c-basic-offset 4)
   #+END_SRC

** Org

   Make code blocks handle tabs and spaces according to /their/ language mode,
   not org's.

   #+BEGIN_SRC emacs-lisp
(setq org-src-tab-acts-natively t)
   #+END_SRC


   Make code blocks not have the extra spaces in front of code in code blocks.

   #+BEGIN_SRC emacs-lisp
(setq org-src-preserve-indentation t)
   #+END_SRC


   Turn on =auto-fill-mode= when using org.

   #+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook #'auto-fill-mode)
   #+END_SRC


   When exporting org to HTML, use =htmlize= to enable syntax highlighting of
   code blocks.

   #+BEGIN_SRC emacs-lisp
(use-package htmlize)
   #+END_SRC

* Windows
** =ace-window=

   Enable =ace-window=.

   #+BEGIN_SRC emacs-lisp
(use-package ace-window
  :bind ("M-o" . ace-window))
   #+END_SRC

* Workflow
** =eshell-window=

   Command used to create, delete, and select =eshell= windows.

   #+BEGIN_SRC emacs-lisp
(defun eshell-window ()
  "Deletes selected window if it is has an eshell buffer open. If selected
window does not have an eshell buffer open, selects a window with an open eshell
buffer. If no window has an eshell buffer, create one across the bottom."
  (interactive)
  (if (string= (buffer-name) "*eshell*")
      (delete-window)
    (select-window (or (get-buffer-window "*eshell*")
                       (split-window (frame-root-window) -15 'below)))
    (unless (string= (buffer-name) "*eshell*")
      (eshell))))
   #+END_SRC


   Bind =F7= to =eshell-window=.

   #+BEGIN_SRC emacs-lisp
(global-set-key [f7] #'eshell-window)
   #+END_SRC

** =projectile=

   Use =projectile= for project management.

   #+BEGIN_SRC emacs-lisp
(use-package projectile
  :hook (after-init . projectile-mode)
  :bind-keymap
  ("C-c p" . projectile-command-map))
   #+END_SRC

** =neotree=

   Enable =neotree=, set =neo-theme= to =ascii=, and bind =F8= to
   =neotree-toggle=.

   #+BEGIN_SRC emacs-lisp
(use-package neotree
  :bind ([f8] . neotree-toggle)
  :init
  (setq-default neo-theme 'ascii))
   #+END_SRC

** =magit=

   Enable =magit=.

   #+BEGIN_SRC emacs-lisp
(use-package magit)
   #+END_SRC

* Misc
** Backups

   Move backup files to =~/.gen/emacs/backups= and change some settings to make
   backups generally better.

   #+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/.gen/emacs/backups"))
      version-control t
      delete-old-versions t)
   #+END_SRC

** Theme

   Use =solarized-dark= theme. In org mode, use monospace, non-scaled headlines.

   #+BEGIN_SRC emacs-lisp
(use-package solarized-theme
  :init
  (setq solarized-use-variable-pitch nil
        solarized-scale-org-headlines nil)
  :config
  (load-theme 'solarized-dark t))
   #+END_SRC

** Minibuffer
*** Y/N Prompt

    Change yes/no prompts to y/n.

    #+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
    #+END_SRC

*** Autocomplete

    Enable minibuffer autocomplete using =ivy=.

    #+BEGIN_SRC emacs-lisp
(use-package ivy
  :config
  (ivy-mode 1))
    #+END_SRC

** Mode Line

   Functions to format the mode line.

   #+BEGIN_SRC emacs-lisp
(defun align-mode-line (left right)
  "Return a string with text aligned LEFT and RIGHT for the mode line"
  (let* ((true-left (format-mode-line left))
         (true-right (format-mode-line right))
         (available-width
          (- (window-total-width) (length true-left))))
    (replace-regexp-in-string
     "%" "%%"
     (format (format "%%s%%%ds" available-width) true-left true-right))))
   #+END_SRC


   Set =mode-line-format=. Format is the following:
   - Left aligned
     1. Memory warning if there is one
     2. Buffer name
     3. A character depending on the state of the buffer
        + '%' if the buffer is read only
        + '*' if the buffer is modified
        + '-' otherwise
     4. The name of the major mode wrapped in square brackets
   - Right aligned
     1. The line of the cursor, a colon, and the column of the cursor
     2. Percentage of buffer text above the top of the window
     3. The size of the file
     4. Source control

   #+BEGIN_SRC emacs-lisp
(setq-default mode-line-format
              '((:eval (align-mode-line
                        '("%e "
                          mode-line-buffer-identification " "
                          mode-line-modified " "
                          "[" mode-name "]")
                        '("%l:%c "
                          mode-line-percent-position " of %IB"
                          vc-mode
                          " ")))))
   #+END_SRC


   Remove the underline from the mode line.

   #+BEGIN_SRC emacs-lisp
(set-face-attribute 'mode-line nil
                    :underline nil)

(set-face-attribute 'mode-line-inactive nil
                    :underline nil)
   #+END_SRC

* TODO Future [4/7]
  - [ ] prettify :: kind of like ligatures
  - [X] electric-pair :: matching parens auto-inserted
  - [X] magit :: git interface
  - [ ] beacon :: cursor tracking
  - [X] ivy :: minibuffer autocomplete
  - [X] projectile :: project management
  - [ ] desktop :: saving emacs sessions
  - [ ] irony-mode :: suppliment to company
